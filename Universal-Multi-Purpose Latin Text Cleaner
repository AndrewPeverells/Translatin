import re
import nltk
import cltk
from cltk.tokenize.word import WordTokenizer
from nltk.tokenize.punkt import PunktLanguageVars

sentence = 'EVCLIO Exi, inquam. age exi. exeundom hercle tibi omonimum hinc est foras, 40 circumspectatrix cum oculis emissiciis. STAPHYLA Nam cur me miseram verberas? EVCL. Vt misera sis atque ut te dignam mala malam aetatem exigas. STAPH. Nam qua me nunc causa extrusisti ex aedibus? EVCL. Tibi ego rationem reddam, stimulorum seges? 45 illuc regredere ab ostio. illuc sis vide, ut incedit. at scin quo modo tibi res se habet? si hercle hodie fustem cepero aut stimulum in manum, testudineum istum tibi ego grandibo gradum. STAPH. Vtinam me divi adaxint ad suspendium 50 potius quidem quam hoc pacto apud te serviam. EVCL. At ut scelesta sola secum murmurat. oculos hercle ego istos, improba, ecfodiam tibi, ne me observare possis quid rerum geram. abscede etiam nunc -- etiam nunc -- etiam -- ohe, 55 istic astato. si hercle tu ex istoc loco digitum transvorsum aut unguem latum excesseris aut si respexis, donicum ego te iussero, continuo hercle ego te dedam discipulam cruci. scelestiorem me hac anu certo scio 60 vidisse numquam, nimisque ego hanc metuo male, ne mi ex insidiis verba imprudenti duit neu persentiscat aurum ubi est absconditum, quae in occipitio quoque habet oculos pessima. nunc ibo ut visam sitne ita aurum ut condidi, 65 quod me sollicitat plurimis miserum modis.-- STAPH. Noenum mecastor quid ego ero dicam meo malae rei evenisse quamve insaniam, queo comminisci; ita me miseram ad hunc modum decies die uno saepe extrudit aedibus. 70 nescio pol quae illunc hominem intemperiae tenent: pervigilat noctes totas, tum autem interdius quasi claudus sutor domi sedet totos dies. neque iam quo pacto celem erilis filiae probrum, propinqua partitudo cui appetit, 75 queo comminisci; neque quicquam meliust mihi, ut opinor, quam ex me ut unam faciam litteram longam, <meum> laqueo collum quando obstrinxero. Scena secunda EVCL. Nunc defaecato demum animo egredior domo, postquam perspexi salva esse intus omnia. 80 redi nunciam intro atque intus serva. STAPH. Quippini? ego intus servem? an ne quis aedes auferat? nam hic apud nos nihil est aliud quaesti furibus, ita inaniis sunt oppletae atque araneis. EVCL. Mirum quin tua me causa faciat Iuppiter 85 Philippum regem aut Dareum, trivenefica. araneas mihi ego illas servari volo. pauper sum; fateor, patior; quod di dant fero. abi intro, occlude ianuam. iam ego hic ero. cave quemquam alienum in aedis intro miseris. 90 quod quispiam ignem quaerat, extingui volo, ne causae quid sit quod te quisquam quaeritet. nam si ignis vivet, tu extinguere extempulo. tum aquam aufugisse dicito, si quis petet. cultrum, securim, pistillum, mortarium, 95 quae utenda vasa semper vicini rogant, fures venisse atque abstulisse dicito. profecto in aedis meas me absente neminem volo intro mitti. atque etiam hoc praedico tibi, si Bona Fortuna veniat, ne intro miseris. 100 STAPH. Pol ea ipsa credo ne intro mittatur cavet, nam ad aedis nostras numquam adit, quamquam prope est. EVCL. Tace atque abi intro. STAPH. Taceo atque abeo.-- EVCL. Occlude sis fores ambobus pessulis. iam ego hic ero. discrucior animi, quia ab domo abeundum est mihi. 105 nimis hercle invitus abeo. sed quid agam scio. nam noster nostrae qui est magister curiae dividere argenti dixit nummos in viros;'
text = sentence

# CLTK tokenizer

word_tokenizer = WordTokenizer('latin')
word_tokenizer.tokenize(text.lower())

p = PunktLanguageVars()
tokens = p.word_tokenize(sentence)
[w for w in tokens if w not in STOPS_LIST]

# General cleaning

class MultiReplacer(object):

    def __init__(self):
        patterns = [(r'v', 'u'), ('V', 'U'), (r'j', 'i'), (r'J', 'I'), (r'uors', 'uers'), (r",", " "), (r"-", ""),
                   (r'0', ''), (r"1", ""), (r"2", ""), (r"3", ""), (r"4", ""), (r"5", ""), (r"6", ""), (r"7", ""), (r"8", ""), (r"9", ""),
                   (r"<", " "), (r">", " "), (r'"', " "), (r"=", " "), (r"^", " "),
                   (r',', ' '), (r":", " "), (r";", " "), (r"!", " "), (r"â€™", " "), (r"-", " "),
                   (r'  ', ' ')]
        self.patterns = \
            [(re.compile(regex), repl) for (regex, repl) in patterns]

    def clean(self, text):
        for (pattern, repl) in self.patterns:
            text = re.subn(pattern, repl, text)[0]
        return text

j = MultiReplacer()
pirla = j.clean(sentence.replace('.', '').replace('?', '').replace('(', '').replace(')', '').replace('[', '').replace(']', '').lower())

# Enclitics handler: exceptions database

enclitics = ["que", "n", "ne", "ue", "ve", "st"]

que_exceptions = []
n_exceptions = []
ne_exceptions = []
ue_exceptions = []
ve_exceptions = []
st_exceptions = []

# quisque / quique
que_exceptions += [
    "quisque",
    "quidque",
    "quicque",
    "quodque",
    "cuiusque",
    "cuique",
    "quemque",
    "quamque",
    "quoque",
    "quaque",
    "quique",
    "quaeque",
    "quorumque",
    "quarumque",
    "quibusque",
    "quosque",
    "quasque",
]

# uterque
que_exceptions += [
    "uterque",
    "utraque",
    "utrumque",
    "utriusque",
    "utrique",
    "utrumque",
    "utramque",
    "utroque",
    "utraque",
    "utrique",
    "utraeque",
    "utrorumque",
    "utrarumque",
    "utrisque",
    "utrosque",
    "utrasque",
]

# quiscumque
que_exceptions += [
    "quicumque",
    "quidcumque",
    "quodcumque",
    "cuiuscumque",
    "cuicumque",
    "quemcumque",
    "quamcumque",
    "quocumque",
    "quacumque",
    "quicumque",
    "quaecumque",
    "quorumcumque",
    "quarumcumque",
    "quibuscumque",
    "quoscumque",
    "quascumque",
]

# unuscumque
que_exceptions += [
    "unusquisque",
    "unaquaeque",
    "unumquodque",
    "unumquidque",
    "uniuscuiusque",
    "unicuique",
    "unumquemque",
    "unamquamque",
    "unoquoque",
    "unaquaque",
]

# plerusque
que_exceptions += [
    "plerusque",
    "pleraque",
    "plerumque",
    "plerique",
    "pleraeque",
    "pleroque",
    "pleramque",
    "plerorumque",
    "plerarumque",
    "plerisque",
    "plerosque",
    "plerasque",
]

# misc
que_exceptions += [
    "absque",
    "abusque",
    "adaeque",
    "adusque",
    "aeque",
    "antique",
    "atque",
    "circumundique",
    "conseque",
    "cumque",
    "cunque",
    "denique",
    "deque",
    "donique",
    "hucusque",
    "inique",
    "inseque",
    "itaque",
    "longinque",
    "namque",
    "neque",
    "oblique",
    "peraeque",
    "praecoque",
    "propinque",
    "qualiscumque",
    "quandocumque",
    "quandoque",
    "quantuluscumque",
    "quantumcumque",
    "quantuscumque",
    "quinque",
    "quocumque",
    "quomodocumque",
    "quomque",
    "quotacumque",
    "quotcumque",
    "quotienscumque",
    "quotiensque",
    "quotusquisque",
    "quousque",
    "relinque",
    "simulatque",
    "torque",
    "ubicumque",
    "ubique",
    "undecumque",
    "undique",
    "usque",
    "usquequaque",
    "utcumque",
    "utercumque",
    "utique",
    "utrimque",
    "utrique",
    "utriusque",
    "utrobique",
    "utrubique",
]

ne_exceptions += [
    "absone",
    "acharne",
    "acrisione",
    "acumine",
    "adhucine",
    "adsuetudine",
    "aeetine",
    "aeschynomene",
    "aesone",
    "agamemnone",
    "agmine",
    "albane",
    "alcyone",
    "almone",
    "alsine",
    "amasene",
    "ambitione",
    "amne",
    "amoene",
    "amymone",
    "anadyomene",
    "andrachne",
    "anemone",
    "aniene",
    "anne",
    "antigone",
    "aparine",
    "apolline",
    "aquilone",
    "arachne",
    "arne",
    "arundine",
    "ascanione",
    "asiane",
    "asine",
    "aspargine",
    "babylone",
    "barine",
    "bellone",
    "belone",
    "bene",
    "benigne",
    "bipenne",
    "bizone",
    "bone",
    "bubone",
    "bulbine",
    "cacumine",
    "caligine",
    "calymne",
    "cane",
    "carcine",
    "cardine",
    "carmine",
    "catacecaumene",
    "catone",
    "cerne",
    "certamine",
    "chalbane",
    "chamaedaphne",
    "chamaemyrsine",
    "chaone",
    "chione",
    "christiane",
    "clymene",
    "cognomine",
    "commagene",
    "commune",
    "compone",
    "concinne",
    "condicione",
    "condigne",
    "cone",
    "confine",
    "consone",
    "corone",
    "crastine",
    "crepidine",
    "crimine",
    "crine",
    "culmine",
    "cupidine",
    "cyane",
    "cydne",
    "cyllene",
    "cyrene",
    "daphne",
    "depone",
    "desine",
    "dicione",
    "digne",
    "dine",
    "dione",
    "discrimine",
    "diutine",
    "dracone",
    "dulcedine",
    "elatine",
    "elephantine",
    "elleborine",
    "epidamne",
    "erigone",
    "euadne",
    "euphrone",
    "euphrosyne",
    "examine",
    "faune",
    "femine",
    "feminine",
    "ferrugine",
    "fine",
    "flamine",
    "flumine",
    "formidine",
    "fragmine",
    "fraterne",
    "fulmine",
    "fune",
    "germane",
    "germine",
    "geryone",
    "gorgone",
    "gramine",
    "grandine",
    "haecine",
    "halcyone",
    "hammone",
    "harundine",
    "hedone",
    "helene",
    "helxine",
    "hermione",
    "heroine",
    "hesione",
    "hicine",
    "hicne",
    "hierabotane",
    "hippocrene",
    "hispane",
    "hodierne",
    "homine",
    "hominesne",
    "hortamine",
    "hucine",
    "humane",
    "hunccine",
    "huncine",
    "iasione",
    "iasone",
    "igne",
    "imagine",
    "immane",
    "immune",
    "impoene",
    "impone",
    "importune",
    "impune",
    "inane",
    "inconcinne",
    "indagine",
    "indigne",
    "inferne",
    "inguine",
    "inhumane",
    "inpone",
    "inpune",
    "insane",
    "insigne",
    "inurbane",
    "ismene",
    "istucine",
    "itone",
    "iuuene",
    "karthagine",
    "labiene",
    "lacedaemone",
    "lanugine",
    "latine",
    "legione",
    "lene",
    "lenone",
    "libidine",
    "limine",
    "limone",
    "lumine",
    "magne",
    "maligne",
    "mane",
    "margine",
    "marone",
    "masculine",
    "matutine",
    "medicamine",
    "melpomene",
    "memnone",
    "mesene",
    "messene",
    "misene",
    "mitylene",
    "mnemosyne",
    "moderamine",
    "moene",
    "mone",
    "mortaline",
    "mucrone",
    "munimine",
    "myrmidone",
    "mytilene",
    "ne",
    "necne",
    "neptune",
    "nequene",
    "nerine",
    "nocturne",
    "nomine",
    "nonne",
    "nullane",
    "numine",
    "nuncine",
    "nyctimene",
    "obscene",
    "obsidione",
    "oenone",
    "omine",
    "omne",
    "oppone",
    "opportune",
    "ordine",
    "origine",
    "orphne",
    "oxymyrsine",
    "paene",
    "pallene",
    "pane",
    "paraetacene",
    "patalene",
    "pectine",
    "pelagine",
    "pellene",
    "pene",
    "perbene",
    "perbenigne",
    "peremne",
    "perenne",
    "perindigne",
    "peropportune",
    "persephone",
    "phryne",
    "pirene",
    "pitane",
    "plane",
    "pleione",
    "plene",
    "pone",
    "praefiscine",
    "prasiane",
    "priene",
    "priuigne",
    "procne",
    "proditione",
    "progne",
    "prone",
    "propone",
    "pulmone",
    "pylene",
    "pyrene",
    "pythone",
    "ratione",
    "regione",
    "religione",
    "remane",
    "retine",
    "rhene",
    "rhododaphne",
    "robigine",
    "romane",
    "roxane",
    "rubigine",
    "sabine",
    "sane",
    "sanguine",
    "saturne",
    "seditione",
    "segne",
    "selene",
    "semine",
    "semiplene",
    "sene",
    "sepone",
    "serene",
    "sermone",
    "serrane",
    "siccine",
    "sicine",
    "sine",
    "sithone",
    "solane",
    "sollemne",
    "somne",
    "sophene",
    "sperne",
    "spiramine",
    "stamine",
    "statione",
    "stephane",
    "sterne",
    "stramine",
    "subpone",
    "subtegmine",
    "subtemine",
    "sulmone",
    "superne",
    "supine",
    "suppone",
    "susiane",
    "syene",
    "tantane",
    "tantine",
    "taprobane",
    "tegmine",
    "telamone",
    "temne",
    "temone",
    "tene",
    "testudine",
    "theophane",
    "therone",
    "thyone",
    "tiberine",
    "tibicine",
    "tiburne",
    "tirone",
    "tisiphone",
    "torone",
    "transitione",
    "troiane",
    "turbine",
    "turne",
    "tyrrhene",
    "uane",
    "uelamine",
    "uertigine",
    "uesane",
    "uimine",
    "uirgine",
    "umbone",
    "unguine",
    "uolumine",
    "uoragine",
    "urbane",
    "uulcane",
    "zone",
]

n_exceptions += [
    "aenean",
    "agmen",
    "alioquin",
    "an",
    "attamen",
    "cacumen",
    "carmen",
    "certamen",
    "clymenen",
    "cognomen",
    "crimen",
    "culmen",
    "dein",
    "deucalion",
    "discrimen",
    "en",
    "epitheton",
    "erinyn",
    "exin",
    "flumen",
    "forsan",
    "forsitan",
    "fulmen",
    "gramen",
    "hymen",
    "iason",
    "in",
    "limen",
    "liquamen",
    "lumen",
    "nomen",
    "non",
    "numen",
    "omen",
    "orion",
    "paean",
    "pan",
    "pelion",
    "phaethon",
    "python",
    "quin",
    "semen",
    "sin",
    "specimen",
    "tamen",
    "themin",
    "titan",
]

ue_exceptions += [
    "agaue",
    "ambigue",
    "assidue",
    "aue",
    "boue",
    "breue",
    "calue",
    "caue",
    "ciue",
    "congrue",
    "contigue",
    "continue",
    "curue",
    "exigue",
    "exue",
    "fatue",
    "faue",
    "fue",
    "furtiue",
    "gradiue",
    "graue",
    "ignaue",
    "incongrue",
    "ingenue",
    "innocue",
    "ioue",
    "lasciue",
    "leue",
    "moue",
    "mutue",
    "naue",
    "neue",
    "niue",
    "perexigue",
    "perspicue",
    "pingue",
    "praecipue",
    "praegraue",
    "prospicue",
    "proterue",
    "remoue",
    "resolue",
    "saeue",
    "salue",
    "siue",
    "solue",
    "strenue",
    "sue",
    "summoue",
    "superflue",
    "supplicue",
    "tenue",
    "uiue",
    "ungue",
    "uoue",
]

ve_exceptions += [
    "agave",
    "ave",
    "bove",
    "breve",
    "calve",
    "cave",
    "cive",
    "curve",
    "fave",
    "furtive",
    "gradive",
    "grave",
    "ignave",
    "iove",
    "lascive",
    "leve",
    "move",
    "nave",
    "neve",
    "nive",
    "praegrave",
    "promiscue",
    "prospicve",
    "proterve",
    "remove",
    "resolve",
    "saeve",
    "salve",
    "sive",
    "solve",
    "summove",
    "vive",
    "vove",
]

st_exceptions += [
    "abest",
    "adest",
    "ast",
    "deest",
    "est",
    "inest",
    "interest",
    "post",
    "potest",
    "prodest",
    "subest",
    "superest",
]

latin_exceptions = list(
    set(
        que_exceptions
        + ne_exceptions
        + n_exceptions
        + ue_exceptions
        + ve_exceptions
        + st_exceptions
    )
)

exceptions = list(set(enclitics + latin_exceptions))

latin_replacements = [
    (r"\bmecum\b", "cum me"),
    (r"\btecum\b", "cum te"),
    (r"\bsecum\b", "cum se"),
    (r"\bnobiscum\b", "cum nobis"),
    (r"\bvobiscum\b", "cum vobis"),
    (r"\buobiscum\b", "cum uobis"),
    (r"\bquocum\b", "cum quo"),
    (r"\bquacum\b", "cum qua"),
    (r"\bquicum\b", "cum qui"),
    (r"\bquibuscum\b", "cum quibus"),
    (r"\bsodes\b", "si audes"),
    (r"\bsatin\b", "satis ne"),
    (r"\bscin\b", "scis ne"),
    (r"\bsultis\b", "si vultis"),
    (r"\bsimilist\b", "similis est"),
    (r"\bqualist\b", "qualis est"),
]

#Enclitics handler: code

pisquano = []

for token in pirla:
    is_enclitic = False
    if token.lower() not in exceptions:
        for enclitic in enclitics:
            if token.endswith(enclitic):
                if enclitic == "n":
                    pisquano += [token[: -len(enclitic)]] + ["-ne"]
                elif enclitic == "st":
                    if token.endswith("ust"):
                        pisquano += [token[: -len(enclitic) + 1]] + [
                            "est"
                        ]
                    else:
                        pisquano += [token[: -len(enclitic)]] + ["est"]
                else:
                    pisquano += [token[: -len(enclitic)]] + [
                        "-" + enclitic
                    ]
                is_enclitic = True
                break
    if not is_enclitic:
        pisquano.append(token)

for sent in pisquano:
            ciÃ¼ciamanÃ¼ber = word_tokenizer.tokenize(pirla.lower())
            if sent:
                if ciÃ¼ciamanÃ¼ber[0].endswith("que"):
                    if ciÃ¼ciamanÃ¼ber[0].lower() not in exceptions:
                        temp = [ciÃ¼ciamanÃ¼ber[0][:-2], "-ne"]
                        ciÃ¼ciamanÃ¼ber = temp + ciÃ¼ciamanÃ¼ber[1:]
                if ciÃ¼ciamanÃ¼ber[-1].endswith("."):
                    final_word = ciÃ¼ciamanÃ¼ber[-1][:-1]
                    del ciÃ¼ciamanÃ¼ber[-1]
                    ciÃ¼ciamanÃ¼ber += [final_word, "."]

                for token in ciÃ¼ciamanÃ¼ber:
                    tokens.append(token)

clean_text = ciÃ¼ciamanÃ¼ber

print(clean_text)

# Cleaning stopwords

stopwords = [
    "ab",
    "-que",
    "-ne",
    "ue",
    "ac",
    "ad",
    "adhic",
    "aliqui",
    "aliquis",
    "an",
    "ante",
    "apud",
    "at",
    "atque",
    "aut",
    "autem",
    "cum",
    "cur",
    "de",
    "deinde",
    "dum",
    "ego",
    "enim",
    "ergo",
    "es",
    "est",
    "et",
    "etiam",
    "etsi",
    "ex",
    "fio",
    "haud",
    "hic",
    "hinc",
    "iam",
    "idem",
    "igitur",
    "ille",
    "in",
    "infra",
    "inter",
    "interim",
    "ipse",
    "is",
    "ita",
    "magis",
    "modo",
    "mox",
    "nam",
    "ne",
    "nec",
    "necque",
    "neque",
    "nisi",
    "non",
    "nos",
    "o",
    "ob",
    "per",
    "possum",
    "post",
    "pro",
    "quae",
    "quam",
    "quare",
    "qui",
    "quia",
    "quicumque",
    "quidem",
    "quilibet",
    "quis",
    "quisnam",
    "quisquam",
    "quisque",
    "quisquis",
    "quo",
    "quoniam",
    "sed",
    "si",
    "sic",
    "sive",
    "sub",
    "sui",
    "sum",
    "super",
    "suus",
    "tam",
    "tamen",
    "tibi",
    "trans",
    "tu",
    "tum",
    "ubi",
    "uel",
    "uero",
    "unus",
    "ut",
]

def removeStopwords(clean_text, stopwords):
    return [w for w in clean_text if w not in stopwords]

clean_text_no_sw = removeStopwords(clean_text, stopwords)
print(clean_text_no_sw)
